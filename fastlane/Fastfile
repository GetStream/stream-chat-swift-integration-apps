default_platform(:ios)
skip_docs

before_all do
  if is_ci
    setup_ci
    xcversion(version: "~> 13.4.1")
  end
end

platform :ios do
  desc "Build OSS Integration App"
  lane :build_oss_integration_app do |options|
    scheme = options[:scheme]

    if scheme.downcase["cocoapods"]
      build_app(
        workspace: "StreamChatIntegration.xcworkspace",
        scheme: scheme,
        skip_archive: true,
        skip_codesigning: true
      )
    else
      build_app(
        project: "#{scheme}.xcodeproj",
        scheme: scheme,
        skip_archive: true,
        skip_codesigning: true
      )
    end
  end

  desc "Build XC Integration App"
  lane :build_xc_integration_app do |options|
    build_app(
      workspace: "XCIntegration/StreamChatIntegration-XC.xcworkspace",
      scheme: options[:scheme],
      skip_archive: true,
      skip_codesigning: true
    )
  end

  desc "Build all integration apps"
  lane :build_all_integration_apps do |options|
    ["StreamChatIntegration-SPM", "StreamChatIntegration-CocoaPods", "StreamChatIntegration-Carthage"].each do |scheme|
      build_oss_integration_app(scheme:scheme)
    end

    ["StreamChatIntegration-XC-CocoaPods", "StreamChatIntegration-XC-SPM", "StreamChatIntegration-XC-Carthage"].each do |scheme|
      build_xc_integration_app(scheme:scheme)
    end
  end

  desc "Start a new release"
  lane :test_release do |options|
    # Ensure we are on the main branch
    ensure_git_branch(branch: 'main')

    # Ensure we have a clean git status
    # COMMENTING THIS ON PURPOSE: ensure_git_status_clean unless options[:no_ensure_clean]

    # Ensure we have a release version
    UI.user_error!('Please use version number') if options[:version].nil?

    # Ensure We Have the GITHUB Token
    UI.user_error!('Please set GITHUB_TOKEN environment value. See https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token') if ENV['GITHUB_TOKEN'].nil?

    # Previous Version Number
    previous_version_number = last_git_tag

    # Version Number
    version_number = options[:version]

    # Checkout New Release Branch
    sh("git checkout -b release/#{version_number}")

    Dir.chdir('..') do
      # Reset Carthage Folder
      ['Carthage', 'XCIntegration/Carthage'].each { |dir| FileUtils.rm_rf(Dir.glob(dir)) }

      # Bump version of our SDK in all config files
      bump_sdk_version(new_version: version_number, old_version: previous_version_number)

      # Update version of our SDK for all supported integrations
      # COMMENTING THIS ON PURPOSE: sh("scripts/fetch_dependencies.sh -v #{version_number}")
    end

    # Commit changes (version bumps, etc)
    sh('git add -A')

    all_good = prompt(text: 'Will commit changes. All looking good?', boolean: true)
    UI.user_error!('Not committing changes') unless all_good

    sh("git commit -m 'Release #{version_number}'")
    add_git_tag(tag: version_number)

    all_good = prompt(text: 'Will push changes. All looking good?', boolean: true)
    UI.user_error!('Not pushing changes') unless all_good

    push_to_git_remote

    # Open a new PR
    create_pull_request(
      api_token: ENV['GITHUB_TOKEN'],
      repo: 'GetStream/stream-chat-swift-integration-apps',
      title: "#{version_number} Release",
      head: "release/#{version_number}",
      base: 'main',
      body: "Release #{version_number}"
    )
  end

  lane :bump_sdk_version do |options|
    ['Cartfile', 'Podfile', 'XCIntegration/Podfile'].each do |file_path|
      new_content = File.read(file_path).gsub!(options[:old_version], options[:new_version])
      File.open(file_path, 'w') { |f| f.puts(new_content) }
    end
  end
end
